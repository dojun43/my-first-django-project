name: EC2 deploy

on:
  push:
    branches: [ "main" ]

jobs:
  test:
      runs-on: ubuntu-latest
      strategy:
        max-parallel: 4
        matrix:
          python-version: [3.12]

      steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run Tests
        run: |
          python manage.py test

  deploy:
    runs-on: ubuntu-latest
    env:
      # GitHub Secrets 사용
      EC2_PRIVATE_SECRET: ${{ secrets.EC2_PRIVATE_SECRET }}
      EC2_USER: "ubuntu"
      EC2_HOST: ${{ secrets.EC2_HOST }}

    steps:
    - name: git checkout
      uses: actions/checkout@v4

    - name: create pemkey
      run: |
        # pem key 생성
        echo "${EC2_PRIVATE_SECRET}" > ec2-private-key.pem
        chmod 400 ec2-private-key.pem

    - name: create .env
      run: |
        # 환경 변수 설정
        ssh -o StrictHostKeyChecking=no -i ec2-private-key.pem ${EC2_USER}@${EC2_HOST} << 'EOF'
          echo "DB_NAME=${{ secrets.DB_NAME }}" > .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
        EOF

    - name: runserver
      run: |
        # 배포 스크립트 실행
        ssh -o StrictHostKeyChecking=no -i ec2-private-key.pem ${EC2_USER}@${EC2_HOST} "bash -s" < runserver.sh